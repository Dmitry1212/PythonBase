# 1. Реализовать класс Matrix (матрица). Обеспечить перегрузку конструктора класса
# (метод __init__()), который должен принимать данные (список списков) для формирования матрицы.
# Подсказка: матрица — система некоторых математических величин, расположенных в виде
# прямоугольной схемы.
# Примеры матриц вы найдете в методичке.
# Следующий шаг — реализовать перегрузку метода __str__() для вывода матрицы в привычном виде.
# Далее реализовать перегрузку метода __add__() для реализации операции сложения двух
# объектов класса Matrix (двух матриц). Результатом сложения должна быть новая матрица.
# Подсказка: сложение элементов матриц выполнять поэлементно — первый элемент первой
# строки первой матрицы складываем с первым элементом первой строки второй матрицы и т.д.
import copy

class Matrix:
    def __init__(self, m1):
        self.matrix_1 = m1

    def __str__(self):
        maxl = len(str(max(map(max, self.matrix_1))))
        minl = len(str(min(map(min, self.matrix_1))))

        spaces = maxl if maxl > minl + 1 else minl + 1  # Длина самого большо числа
        st = ''             # выходная строка
        for i in self.matrix_1:
            for j in i:
                # print(f'{j:{spaces + 1}.0f} ', end='')    # ошибки молодости
                st += str(j).rjust(spaces+1)
            st += '\n '

        return st

    def __add__(self, other):
        result = copy.deepcopy(self.matrix_1)   # единичную или нулевую особого смысла генерировать нет,
                                                # т.к. все равно все значения перепишутся
        for i in range(len(self.matrix_1)):
            for j in range(len(self.matrix_1[0])):
                result[i][j] = self.matrix_1[i][j] + other.matrix_1[i][j]

        return Matrix(result)


mat1 = [[111, 2, 3], [4, 5, 6], [-7555, 8, 9]]
mat2 = [[100611, 434, 3], [55, 767, 5303400000], [-7555, 8, 9]]


m_1 = Matrix(mat1)
m_2 = Matrix(mat2)
print(f'Первая матрица \n {m_1} ')
print(f'Вторая матрица  \n {m_2} ')
print(f'Сумма матриц \n {m_1 + m_2} ')
print(f'Проверка первой матрицы \n {m_1} ')


